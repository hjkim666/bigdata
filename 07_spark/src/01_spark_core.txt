p67

val acTransList = Array("SB10001,1000", "SB10002,1200", "SB10003,8000", "SB10004,400", "SB10005,300", "SB10006,10000", "SB10007,500", "SB10008,56", "SB10009,30","SB10010,7000", "CR10001,7000", "SB10002,-10")
val acTransRDD = sc.parallelize(acTransList)
val goodTransRecords = acTransRDD.filter(_.split(",")(1).toDouble > 0).filter(_.split(",")(0).startsWith("SB"))
val highValueTransRecords = goodTransRecords.filter(_.split(",")(1).toDouble > 1000)
val badAmountLambda = (trans: String) => trans.split(",")(1).toDouble <= 0
val badAcNoLambda = (trans: String) => trans.split(",")(0).startsWith("SB") == false
val badAmountRecords = acTransRDD.filter(badAmountLambda)
val badAccountRecords = acTransRDD.filter(badAcNoLambda)
val badTransRecords  = badAmountRecords.union(badAccountRecords)
acTransRDD.collect()
goodTransRecords.collect()
highValueTransRecords.collect()
badAccountRecords.collect()
badAmountRecords.collect()
badTransRecords.collect()
val sumAmount = goodTransRecords.map(trans => trans.split(",")(1).toDouble).reduce(_ + _)
val maxAmount = goodTransRecords.map(trans => trans.split(",")(1).toDouble).reduce((a, b) => if (a > b) a else b)
val minAmount = goodTransRecords.map(trans => trans.split(",")(1).toDouble).reduce((a, b) => if (a < b) a else b)
val combineAllElements = acTransRDD.flatMap(trans => trans.split(","))
val allGoodAccountNos = combineAllElements.filter(_.startsWith("SB"))
combineAllElements.collect()
allGoodAccountNos.distinct().collect()



#mapreduce 

val acTransList = Array("SB10001,1000", "SB10002,1200", "SB10001,8000", "SB10002,400", "SB10003,300", "SB10001,10000", "SB10004,500", "SB10005,56", "SB10003,30","SB10002,7000", "SB10001,-100", "SB10002,-10")
val acTransRDD = sc.parallelize(acTransList)
val acKeyVal = acTransRDD.map(trans => (trans.split(",")(0), trans.split(",")(1).toDouble))
val accSummary = acKeyVal.reduceByKey(_ + _).sortByKey()
accSummary.collect()


#join
val acMasterList = Array("SB10001,Roger,Federer", "SB10002,Pete,Sampras", "SB10003,Rafel,Nadal", "SB10004,Boris,Becker", "SB10005,Ivan,Lendl")
val acBalList = Array("SB10001,50000", "SB10002,12000", "SB10003,3000", "SB10004,8500", "SB10005,5000")
val acMasterRDD = sc.parallelize(acMasterList)
val acBalRDD = sc.parallelize(acBalList)
val acMasterTuples = acMasterRDD.map(master => master.split(",")).map(masterList => (masterList(0), masterList(1) + " " + masterList(2)))
val acBalTuples = acBalRDD.map(trans => trans.split(",")).map(transList => (transList(0), transList(1)))
val acJoinTuples = acMasterTuples.join(acBalTuples).sortByKey().map{case (accno, (name, amount)) => (accno, name,amount)}
acJoinTuples.collect()
val acNameAndBalance = acJoinTuples.map{case (accno, name,amount) => (name,amount)}
val acTuplesByAmount = acBalTuples.map{case (accno, amount) => (amount.toDouble, accno)}.sortByKey(false)
acTuplesByAmount.first()
acTuplesByAmount.take(3)
acBalTuples.countByKey()
acBalTuples.count()
acNameAndBalance.foreach(println)
val balanceTotal = sc.accumulator(0.0, "Account Balance Total")
acBalTuples.map{case (accno, amount) => amount.toDouble}.foreach(bal => balanceTotal += bal)
println(balanceTotal.value)
 